// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for the different subscription plans
enum Plan {
  FREE
  PRO
}

// User model to store user information and their subscription status
model User {
  id        String   @id // Use Supabase auth.users.id (UUID)
  email     String   @unique
  name      String?
  credits   Int      @default(5) // Daily credits for free users
  plan      Plan     @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subscription fields
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?
  subscriptionStatus   String?   // 'active', 'canceled', 'past_due', etc.
  subscriptionEndDate  DateTime? // When the current billing period ends
  lastCreditReset      DateTime  @default(now()) // Track when credits were last reset

  // User-configurable settings
  userName              String?
  userRole              String?
  userCompany           String?
  userBackground        String?
  userValueProposition  String?

  messages Message[] // Relation to the messages a user has generated
  generatedProfiles GeneratedProfile[] // Relation to the profiles a user has generated for
  payments Payment[] // Payment history
}

// Model to store generated profiles for paid users
model GeneratedProfile {
  id        String   @id @default(cuid())
  linkedinUrl String
  name      String
  basicInformation Json?
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([userId, linkedinUrl]) // A user can only save a specific profile once
}

// Model to store the history of generated messages
model Message {
  id               String   @id @default(cuid())
  body             String
  targetProfileUrl String
  createdAt        DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// Model to store payment history
model Payment {
  id                String   @id @default(cuid())
  stripePaymentId   String   @unique
  amount            Int      // Amount in cents
  currency          String   @default("usd")
  status            String   // 'succeeded', 'pending', 'failed'
  description       String?
  createdAt         DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
